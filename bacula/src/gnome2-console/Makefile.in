#
#   Version $Id$
#
@MCOMMON@

srcdir =	.
VPATH = 	.
.PATH:		.

# one up
basedir = ..
# top dir
topdir = ../..
# this dir relative to top dir
thisdir = src/gnome2-console

DEBUG=@DEBUG@

first_rule: all
dummy:

GNOME_INCLUDEDIR = @GNOME_INCLUDEDIR@
GNOMEUI_LIBS = @GNOMEUI_LIBS@
GNOME_LIBDIR = @GNOME_LIBDIR@
GNOME_LIBS = @GNOME_LIBS@


#
CONSSRCS = console.c console_conf.c authenticate.c support.c interface.c callbacks.c \
	   restore.c
CONSOBJS = console.o console_conf.o authenticate.o support.o interface.o callbacks.o \
	   restore.o

# these are the objects that are changed by the .configure process
EXTRAOBJS = @OBJLIST@

#CONS_INC=@CONS_INC@ $(GNOME_INCLUDEDIR)
#CONS_LIBS=@CONS_LIBS@ $(GNOME_LIBS)
#CONS_LDFLAGS=@CONS_LDFLAGS@ $(GNOME_LIBDIR) $(GNOMEUI_LIBS)

CONS_INC=$(GNOME_INCLUDEDIR)
CONS_LIBS=$(GNOME_LIBS) $(OPENSSL_LIBS)
CONS_LDFLAGS=$(GNOME_LIBDIR) $(GNOMEUI_LIBS)


.SUFFIXES:	.c .o
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(CPPFLAGS) $(CONS_INC) -I$(srcdir) -I$(basedir) $(DINCLUDE) $(CFLAGS) $<
#-------------------------------------------------------------------------
all: Makefile bgnome-console @STATIC_GNOME_CONS@
	@echo "==== Make of bgnome-console is good ===="
	@echo " "

support.o:   support.c
	rm -f support.c.orig
	mv support.c support.c.orig
	sed "s%parent = g_object_get_data%parent = \(GtkWidget \*\)g_object_get_data%" support.c.orig >support.c
	$(CXX) $(DEFS) $(DEBUG) -c $(CPPFLAGS) $(CONS_INC) -I$(srcdir) -I$(basedir) $(DINCLUDE) $(CFLAGS) $<

bgnome-console: Makefile $(CONSOBJS) ../lib/libbaccfg$(DEFAULT_ARCHIVE_TYPE) ../lib/libbac$(DEFAULT_ARCHIVE_TYPE) 
	$(LIBTOOL_LINK) $(CXX) $(LDFLAGS) $(CONS_LDFLAGS) -L../lib -o $@ $(CONSOBJS) \
	      $(LIBS) $(DLIB) $(CONS_LIBS) -lbaccfg -lbac -lm

static-console: static-bgnome-console

static-bgnome-console: Makefile $(CONSOBJS) ../lib/libbaccfg$(DEFAULT_ARCHIVE_TYPE) ../lib/libbac$(DEFAULT_ARCHIVE_TYPE) 
	$(LIBTOOL_LINK) $(CXX) $(LDFLAGS) $(CONS_LDFLAGS) -L../lib -o $@ $(CONSOBJS) \
	      $(LIBS) $(DLIB) $(CONS_LIBS) -lbaccfg -lbac -lm 
	strip $@

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool-clean:
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) bgnome-console core core.* a.out *.o *.bak *~ *.intpro *.extpro 1 2 3
	@$(RMF) static-bgnome-console gmon.out Makefile.am

realclean: clean
	@$(RMF) tags
	@$(RM) -rf .deps bgnome-console.conf

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

install: all
	@if test -f ${DESTDIR}${sbindir}/gnome-console; then \
	   echo " "; \
	   echo "Warning!!!  ${DESTDIR}${sbindir}gnome-console found."; \
	   echo " gnome-console has been renamed bgnome-console, so gnome-console"; \
	   echo " is no longer used, and you might want to delete it."; \
	   echo " "; \
	fi
	$(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) bgnome-console $(DESTDIR)$(sbindir)/bgnome-console
	@srcconf=bgnome-console.conf; \
	if  test -f ${DESTDIR}${sysconfdir}/$$srcconf; then \
	   destconf=$$srcconf.new; \
	   echo "  ==> Found existing $$srcconf, installing new conf file as $$destconf"; \
	else \
	   destconf=$$srcconf; \
	fi; \
	echo "${INSTALL_CONFIG} $$srcconf ${DESTDIR}${sysconfdir}/$$destconf"; \
	${INSTALL_CONFIG} $$srcconf ${DESTDIR}${sysconfdir}/$$destconf
	if test -f static-bgnome-console; then \
	   $(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) static-bgnome-console $(DESTDIR)$(sbindir)/static-bgnome-console; \
	fi 

uninstall:
	(cd $(DESTDIR)$(sbindir); $(RMF) bgnome-console static-bgnome-console)
	(cd $(DESTDIR)$(sysconfdir); $(RMF) bgnome-console.conf bgnome-console.conf.new)
	(cd $(DESTDIR)$(sbindir); $(RMF) gnome-console static-gnome-console)
	(cd $(DESTDIR)$(sysconfdir); $(RMF) gnome-console.conf gnome-console.conf.new)




# Semi-automatic generation of dependencies:
# Use gcc -MM because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHO) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@$(CXX) -S -M $(CPPFLAGS) $(XINC) -I$(srcdir) -I$(basedir) $(GNOME_INCLUDEDIR) $(SQL_INC) *.c >> Makefile
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo -e "Something went wrong\n\a"; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
