# $Id$
@MCOMMON@

srcdir =	.
VPATH = 	.
.PATH:		.

# one up
basedir = ..
# top dir
topdir = ../..
# this dir relative to top dir
thisdir = src/stored

DEBUG=@DEBUG@

first_rule: all
dummy:

#
SVRSRCS = stored.c append.c askdir.c authenticate.c block.c dev.c \
	  device.c dircmd.c fd_cmds.c fdmsg.c job.c \
	  label.c match_bsr.c parse_bsr.c \
	  read.c record.c stored_conf.c 
SVROBJS = stored.o append.o askdir.o authenticate.o block.o dev.o \
	  device.o dircmd.o fd_cmds.o fdmsg.o job.o \
	  label.o match_bsr.o parse_bsr.o \
	  read.o record.o stored_conf.o 

# bpool is depricated
#POOLSRCS = bpool.c block.c dev.c device.c askdir.c label.c \
#	    record.c stored_conf.c 
#POOLOBJS = bpool.o block.o dev.o device.o askdir.o label.o \
#	    record.o stored_conf.o 

#
TAPESRCS = btape.c block.c dev.c device.c askdir.c label.c \
	   record.c stored_conf.c 
TAPEOBJS = btape.o block.o dev.o device.o askdir.o label.o \
	   record.o stored_conf.o 

BLSOBJS = bls.o block.o device.o dev.o askdir.o label.o record.o

BEXTOBJS = bextract.o block.o device.o dev.o askdir.o label.o record.o \
	   match_bsr.o parse_bsr.o

SCNOBJS = bscan.o block.o device.o dev.o askdir.o label.o record.o



# it was ``be kind to gmake week''.  Now it's ``autoconf week''
#OBJS = $(SRCS:S,.c,.o,)
# these are the objects that are changed by the .configure process
EXTRAOBJS = @OBJLIST@

FDLIBS=@FDLIBS@


.SUFFIXES:	.c .o
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	$(CXX) $(DEFS) $(DEBUG) -c $(CPPFLAGS) -I$(srcdir) -I$(basedir) $(DINCLUDE) $(CFLAGS) $<
#-------------------------------------------------------------------------
all: Makefile bacula-sd bls bextract bscan btape 
	@echo "===== Make of stored is good ===="
	@echo " "

bacula-sd: $(SVROBJS) ../lib/libbac.a
	$(CXX) $(LDFLAGS) -L../lib -o $@ $(SVROBJS) $(FDLIBS) -lbac -lm $(LIBS) $(DLIB)

#bpool:  $(POOLOBJS) ../lib/libbac.a ../cats/libsql.a
#	 $(CXX) $(LDFLAGS) -L../lib -L../cats  -o $@ $(POOLOBJS) -lsql $(LIBS) $(DLIB) -lbac -lm

btape:	$(TAPEOBJS) ../lib/libbac.a ../cats/libsql.a
	$(CXX) $(LDFLAGS) -L../lib -L../cats  -o $@ $(TAPEOBJS) -lsql $(LIBS) $(DLIB) -lbac -lm

bls:	../findlib/libfind.a $(BLSOBJS) ../lib/libbac.a
	$(CXX) $(LDFLAGS) -L../lib -L../findlib -o $@ $(BLSOBJS) $(LIBS) $(DLIB) -lbac -lfind -lm

bextract: ../findlib/libfind.a $(BEXTOBJS)
	$(CXX) $(LDFLAGS) -L../lib -L../findlib -o $@ $(BEXTOBJS) $(LIBS) $(DLIB) $(FDLIBS) -lbac -lfind -lm

bscan: ../findlib/libfind.a $(SCNOBJS) ../cats/libsql.a
	$(CXX) $(LDFLAGS) -L../lib -L../cats -L../findlib -o $@ $(SCNOBJS) -lsql $(LIBS) $(DLIB) $(FDLIBS) -lbac -lfind -lm




Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

install: all
	$(INSTALL_PROGRAM) bacula-sd $(DESTDIR)$(sbindir)/bacula-sd
	$(INSTALL_PROGRAM) bls $(DESTDIR)$(sbindir)/bls
	$(INSTALL_PROGRAM) bextract $(DESTDIR)$(sbindir)/bextract
#	$(INSTALL_PROGRAM) bpool $(DESTDIR)$(sbindir)/bpool
	$(INSTALL_PROGRAM) btape $(DESTDIR)$(sbindir)/btape
	@srcconf=bacula-sd.conf; \
	if  test -f ${DESTDIR}${sysconfdir}/$$srcconf; then \
	   destconf=$$srcconf.new; \
	   echo "  ==> Found existing $$srcconf, installing new conf file as $$destconf"; \
	else \
	   destconf=$$srcconf; \
	fi; \
	echo "${INSTALL_DATA} $$srcconf ${DESTDIR}${sysconfdir}/$$destconf"; \
	${INSTALL_DATA} $$srcconf ${DESTDIR}${sysconfdir}/$$destconf

uninstall:
	(cd $(DESTDIR)$(sbindir); $(RMF) bacula-sd)
	(cd $(DESTDIR)$(sbindir); $(RMF) bls)
	(cd $(DESTDIR)$(sbindir); $(RMF) bextract)
#	(cd $(DESTDIR)$(sbindir); $(RMF) bpool)
	(cd $(DESTDIR)$(sysconfdir); $(RMF) bacula-sd.conf)


clean:
	@$(RMF) bacula-sd stored bls bextract bpool btape shmfree core core.* a.out *.o *.bak *~ *.intpro *.extpro 1 2 3
	@$(RMF) bscan

realclean: clean
	@$(RMF) tags bacula-sd.conf

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)


# Semi-automatic generation of dependencies:
# Use cc -M because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHO) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@$(CC) -S -M $(CPPFLAGS) $(XINC) -I$(srcdir) -I$(basedir) $(SQL_INC) *.c >> Makefile
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo -e "Something went wrong with make depend\n\a"; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
