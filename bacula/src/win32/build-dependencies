VERBOSE=n
OVERWRITE=n

URL_ZLIB=http://www.zlib.net/zlib-1.2.3.tar.gz
#URL_ZLIB=http://superb-west.dl.sourceforge.net/sourceforge/libpng/zlib-1.2.3.tar.gz
DIR_ZLIB=
URL_PCRE=http://superb-west.dl.sourceforge.net/sourceforge/pcre/pcre-6.3.tar.bz2
DIR_PCRE=
URL_PTHREADS=ftp://sources.redhat.com/pub/pthreads-win32/pthreads-snap-2004-06-22.tar.gz
DIR_PTHREADS=
URL_OPENSSL=http://www.openssl.org/source/openssl-0.9.8b.tar.gz
DIR_OPENSSL=
URL_MYSQL=http://mirror.x10.com/mirror/mysql/Downloads/MySQL-5.0/mysql-noinstall-5.0.22-win32.zip
DIR_MYSQL=mysql-5.0.22-win32
URL_POSTGRESQL=ftp://ftp2.us.postgresql.org/postgresql/source/v8.1.4/postgresql-base-8.1.4.tar.bz2
DIR_POSTGRESQL=postgresql-8.1.4
URL_SQLITE=http://www.sqlite.org/sqlite-3.3.6.tar.gz
DIR_SQLITE=
URL_WX=http://superb-west.dl.sourceforge.net/sourceforge/wxwindows/wxWidgets-2.6.3.tar.gz
DIR_WX=
URL_SCONS=http://superb-west.dl.sourceforge.net/sourceforge/scons/scons-0.96.92.tar.gz
DIR_SCONS=
URL_NSIS_BIN=http://superb-west.dl.sourceforge.net/sourceforge/nsis/nsis-2.17.zip
DIR_NSIS_BIN=
URL_NSIS_SRC=http://superb-west.dl.sourceforge.net/sourceforge/nsis/nsis-2.17-src.tar.bz2
DIR_NSIS_SRC=
URL_MTX=http://superb-west.dl.sourceforge.net/sourceforge/mtx/mtx-1.3.9.tar.gz
DIR_MTX=
URL_MT=ftp://ftp.ibiblio.org/pub/linux/system/backup/mt-st-0.9b.tar.gz
DIR_MT=

cwd=`pwd`
cd `dirname $0`
SCRIPT_DIR=`pwd`

cd ../../..
TOP_DIR=`pwd`

if [ ! -e ${TOP_DIR}/cross-tools/mingw32/bin/mingw32-gcc ] 
then
	echo The GCC cross compiler isn\'t installed.
	echo You must run build-win32-cross-tools first
	exit 1
fi

cd ${TOP_DIR}/cross-tools/mingw32/bin
BIN_DIR=`pwd`

[ ! -e ${TOP_DIR}/depkgs-mingw32 ] && mkdir ${TOP_DIR}/depkgs-mingw32
cd ${TOP_DIR}/depkgs-mingw32
DEPPKG_DIR=`pwd`
cd ${DEPPKG_DIR}

case "${VERBOSE}" in
y*|t*)	VERBOSE=true ;;
n*|f*)	VERBOSE=false ;;
*)	VERBOSE=false ;;
esac

case ${OVERWRITE} in
y*|t*)	OVERWRITE=true ;;
n*|f*)	OVERWRITE=false ;;
*)	OVERWRITE=true ;;
esac

export PATH=${BIN_DIR}:${PATH}

[ ! -e bin ] && mkdir bin
[ ! -e src ] && mkdir src
[ ! -e include ] && mkdir include
[ ! -e lib ] && mkdir lib

get_source()
{
	URL=$1
	SRC_DIR=$2
	ARCHIVE=`basename ${URL}`
	
	case ${ARCHIVE} in
	*.tar.gz)	ARCHIVER="tar xzf"; [ -z "${SRC_DIR}" ] && SRC_DIR=`expr "${ARCHIVE}" : '\(.*\)\.tar\.gz'`;;
	*.tar.bz2)	ARCHIVER="tar xjf"; [ -z "${SRC_DIR}" ] && SRC_DIR=`expr "${ARCHIVE}" : '\(.*\)\.tar\.bz2'`;;
	*.zip)		ARCHIVER="unzip -q";   [ -z "${SRC_DIR}" ] && SRC_DIR=`expr "${ARCHIVE}" : '\(.*\)\.zip'`;;
	*)		echo Unsupported archive type - $ARCHIVE; exit 1;;
	esac
	
	cd ${DEPPKG_DIR}/src
	
	if [ ! -e "${ARCHIVE}" ]
	then 
		echo Downloading "${URL}"
		if wget --passive-ftp "${URL}"
		then
			:
		else
			echo Unable to download ${ARCHIVE}
			exit 1
		fi
	fi

	if [ ! -e "${SRC_DIR}" -o "${OVERWRITE}" = "true" ]
	then
		rm -rf ${SRC_DIR}
		echo Extracting ${ARCHIVE}
		${ARCHIVER} ${ARCHIVE} &> ${ARCHIVE}.log
		cd ${SRC_DIR}
		return 0
	fi

	cd ${SRC_DIR}
	return 1
}

parse_output()
{
    if [ "${VERBOSE}" = "true" ]
    then
	cat
    else
	sed -ne '/\\$/N' -e 's/\\\n//' -e 's/\t\+/ /g' -e 's/ \+/ /g' \
	    -e '/ error: /p' \
	    -e "s%.*Entering directory[ ]\\+.${DEPPKG_DIR}/\\([^ ]\+\).%Entering \\1%p" \
	    -e "s%.*Leaving directory[ ]\\+.${DEPPKG_DIR}/\\([^ ]\+.\).%Leaving \\1%p" \
	    -e '/gcc \|g\+\+ \|ar /!d' \
	    -e 's/ \(\.\.\/\)\+/ /g' \
	    -e 's/.* \([^ ]\+\(\.c\|\.cpp\|\.cc\|\.cxx\)\)\( .*\|\)$/Compiling \1/p' \
	    -e 's/.* \([^ ]\+\.s\)\( .*\|\)$/Assembling \1/p' \
	    -e 's/.*ar [^ ]\+ \([^ ]\+\)\(\( [^ ]\+\.o\)\+\)/Updating \1 -\2/p' \
	    -e 's/.* -o \([^ ]\+\)\( .*\|\)$/Linking \1/p'
    fi
}

do_patch()
{
	PATCH_FILE=${SCRIPT_DIR}/patches/$1; shift
	
	if patch -f -p0 "$@" >patch.log < ${PATCH_FILE}
	then
		:
	else
		echo Patch failed - Check `pwd`/patch.log > /dev/tty
		exit 1
	fi
}

do_make()
{
	if make -f "$@" 2>&1
	then
		:
	else
		echo Make failed - Check `pwd`/make.log > /dev/tty
		exit 1
	fi | tee -a make.log | parse_output
}

process_zlib()
{
	if get_source "${URL_ZLIB}" "${DIR_ZLIB}"
	then
		echo Patching zlib
		do_patch zlib.patch
	fi
	echo Building zlib
	> make.log
	do_make win32/Makefile.mingw32 PREFIX=${DEPPKG_DIR} all
	echo Installing zlib
	do_make win32/Makefile.mingw32 PREFIX=${DEPPKG_DIR} install
}

process_pcre()
{
	if get_source "${URL_PCRE}" "${DIR_PCRE}"
	then
		echo Patching PCRE
		do_patch pcre.patch
	fi
	echo Configuring PCRE
	./configure CC_FOR_BUILD=gcc CXX_FOR_BUILD=g++ --host=mingw32 --prefix=${DEPPKG_DIR} --enable-utf8 --enable-unicode-properties &>make.log
	echo Building PCRE
	do_make Makefile PREFIX=${DEPPKG_DIR} all
	echo Installing PCRE
	do_make Makefile PREFIX=${DEPPKG_DIR} install
}

process_pthreads()
{
	if get_source "${URL_PTHREADS}" "${DIR_PTHREADS}"
	then
		echo Patching pthreads
		do_patch pthreads.patch
	fi
	echo Building pthreads
	> make.log
	do_make GNUmakefile GCE
	echo Installing pthreads
	rm -rf ${DEPPKG_DIR}/include/pthreads
	mkdir ${DEPPKG_DIR}/include/pthreads
	cp -p *.h ${DEPPKG_DIR}/include/pthreads
	cp -p *.dll ${DEPPKG_DIR}/bin
	cp -p *.a ${DEPPKG_DIR}/lib
}

process_openssl()
{
	if get_source "${URL_OPENSSL}" "${DIR_OPENSSL}"
	then
		echo Patching openssl
		do_patch openssl.patch
	fi
	echo Configuring openssl
	./Configure --prefix=${DEPPKG_DIR} shared zlib-dynamic threads --with-zlib-include=${DEPPKG_DIR}/include mingw32 &> make.log
	echo Building openssl
	perl util/mkdef.pl 32 libeay no-static-engine >ms/libeay32.def
	perl util/mkdef.pl 32 ssleay >ms/ssleay32.def
	do_make Makefile all
	echo Installing openssl
	do_make Makefile install_sw
}

process_mysql()
{
	get_source "${URL_MYSQL}" "${DIR_MYSQL}"
	echo Converting mysql lib file
	${BIN_DIR}/../mingw32/bin/reimp --dlltool ${BIN_DIR}/mingw32-dlltool --as ${BIN_DIR}/mingw32-as lib/opt/libmysql.lib
	echo Installing mysql
	cp -p liblibmysql.a ../../lib/libmysql.a
	rm -rf ../../include/mysql
	mkdir ../../include/mysql
	cp -p include/* ../../include/mysql 2>&1 | grep -v 'omitting directory'
	cp -p lib/opt/libmysql.dll ../../bin
}

process_postgreSQL()
{
	if get_source "${URL_POSTGRESQL}" "${DIR_POSTGRESQL}"
	then
		echo Patching postgreSQL
		do_patch postgresql.patch
	fi
	echo Configuring postgreSQL
	./configure --host=mingw32 --enable-shared --enable-thread-safety --prefix=${DEPPKG_DIR} --with-includes=${DEPPKG_DIR}/include:${DEPPKG_DIR}/include/pthreads --with-libraries=${DEPPKG_DIR}/lib &> make.log
	echo Building postgreSQL
	if [ -e /usr/sbin/zic ]; then ZIC=/usr/sbin/zic
	elif [ -e /sbin/zic ]; then ZIC=/sbin/zic
	elif [ -e /usr/bin/zic ]; then ZIC=/usr/bin/zic
	elif [ -e /bin/zic ]; then ZIC=/bin/zic
	else ZIC=./zic
	fi
	do_make Makefile AR=mingw32-ar DLLTOOL=mingw32-dlltool DLLWRAP=mingw32-dllwrap WINDRES=mingw32-windres PTHREAD_LIBS=-lpthreadGCE ZIC=${ZIC} clean all
	echo Installing postgreSQL
	do_make Makefile AR=mingw32-ar DLLTOOL=mingw32-dlltool DLLWRAP=mingw32-dllwrap WINDRES=mingw32-windres PTHREAD_LIBS=-lpthreadGCE ZIC=${ZIC} install
}

process_sqlite()
{
	if get_source "${URL_SQLITE}" "${DIR_SQLITE}"
	then
		echo Patching SQLite
		do_patch sqlite.patch
	fi
	echo Configuring SQLite
	[ ! -e bld ] && mkdir bld
	cd bld
	echo Building SQLite
	> make.log
	do_make ../Makefile.mingw32 CROSSTOOLS=${BIN_DIR} TLIBS="-L${DEPPKG_DIR}/lib" TCL_FLAGS="-I${DEPPKG_DIR}/include" clean all
	echo Installing SQLite
	cp -p sqlite3.exe ${DEPPKG_DIR}/bin
	cp -p libsqlite3.a ${DEPPKG_DIR}/lib
	cp -p sqlite3.h ${DEPPKG_DIR}/include
}

process_wxWidgets()
{
	if get_source "${URL_WX}" "${DIR_WX}"
	then
		echo Patching wxWidgets
		do_patch wx.patch -o build/msw/config.mingw32
		find . -name makefile.gcc -exec sh -c "sed -f ${SCRIPT_DIR}/patches/wx.sed {} > \`echo {} | sed s/\.gcc$/\.mingw32/\`" \;
	fi
	echo Building wxWidgets
	cd build/msw
	> make.log
	do_make makefile.mingw32 SHARED=1 VENDOR=bacula
	echo Installing wxWidgets
	cd ../..
	rm -rf ../../include/wx
	mkdir ../../include/wx
	cp -p include/wx/* ../../include/wx 2>&1 | grep -v 'omitting directory'
	mkdir ../../include/wx/generic
	cp -p include/wx/generic/* ../../include/wx/generic 2>&1 | grep -v 'omitting directory'
	mkdir ../../include/wx/msw
	cp -p include/wx/msw/* ../../include/wx/msw 2>&1 | grep -v 'omitting directory'
	cp -p lib/gcc_dll/*.dll ../../bin
	rm -rf ../../lib/wx_dll
	mkdir ../../lib/wx_dll
	cp -p lib/gcc_dll/*.a ../../lib/wx_dll
	mkdir ../../lib/wx_dll/msw
	cp -p lib/gcc_dll/msw/* ../../lib/wx_dll/msw 2>&1 | grep -v 'omitting directory'
	mkdir ../../lib/wx_dll/msw/wx
	cp -p lib/gcc_dll/msw/wx/* ../../lib/wx_dll/msw/wx 2>&1 | grep -v 'omitting directory'
	mkdir ../../lib/wx_dll/msw/wx/msw
	cp -p lib/gcc_dll/msw/wx/msw/* ../../lib/wx_dll/msw/wx/msw 2>&1 | grep -v 'omitting directory'
}

process_scons()
{
	get_source "${URL_SCONS}" "${DIR_SCONS}"
	echo Installing scons
	if python setup.py install --prefix=${DEPPKG_DIR}/scons &> make.log
	then
		:
	else
		echo Make failed - Check `pwd`/make.log
		exit 1
	fi
}

process_nsis()
{
	get_source "${URL_NSIS_BIN}" "${DIR_NSIS_BIN}"
	cd ..
	rm -rf ../nsis
	mv nsis-2.17 ../nsis
	if get_source "${URL_NSIS_SRC}" "${DIR_NSIS_SRC}"
	then
		echo Patching nsis
		do_patch nsis.patch
	fi
	echo Building nsis
	if ../../scons/bin/scons SKIPSTUBS=all SKIPPLUGINS=all SKIPUTILS=all SKIPMISC=all \
		PREFIX=${DEPPKG_DIR}/nsis PREFIX_BIN=${DEPPKG_DIR}/nsis/Bin \
		PREFIX_CONF=${DEPPKG_DIR}/nsis PREFIX_DATA=${DEPPKG_DIR}/nsis \
		PREFIX_DOC=${DEPPKG_DIR}/nsis/Docs 2>&1 | tee make.log | parse_output
	then
		:
	else
		echo Scons failed - Check `pwd`/make.log
		exit 1
	fi
	echo Installing nsis
	cp -p build/release/makensis/makensis ../../nsis
}

process_mtx()
{
	if get_source "${URL_MTX}" "${DIR_MTX}"
	then
		echo Patching mtx
		# We can't run configure in a cross-compile environment so we
		# patch the files to the correct values
		cp -f config.h.in config.h
		cp -f Makefile.in Makefile
		rm -f configure
		do_patch mtx.patch
	fi
	echo Building mtx
	do_make Makefile prefix=${DEPPKG_DIR} all
	echo Installing mtx
	do_make Makefile prefix=${DEPPKG_DIR} install
}

process_mt()
{
	if get_source "${URL_MT}" "${DIR_MT}"
	then
		echo Patching mt
		do_patch mt.patch
	fi
	echo Building mt
	do_make Makefile prefix=${DEPPKG_DIR} all
	echo Installing mt
	do_make Makefile PREFIX=${DEPPKG_DIR} install
}

if [ "$#" -eq 0 ]
then
	process_zlib
	process_pcre
	process_pthreads
	process_openssl
	process_mysql
	process_sqlite
	process_postgreSQL
	process_wxWidgets
	process_scons
	process_nsis
	process_mtx
else
	for dependency in "$@"
	do
		eval "process_${dependency}"
	done

fi
#vss
#Need to download from Microsoft
